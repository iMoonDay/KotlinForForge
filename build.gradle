buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_version"
}

apply plugin: 'net.minecraftforge.gradle'

version = '1.19.2'
group = 'thedarkcolour.kotlinforforge'
archivesBaseName = 'kotlinforforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

tasks.build.dependsOn kotlinSourcesJar
tasks.build.dependsOn shadowJar

repositories {
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.0'

    api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: kotlin_version
    api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
	api group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version
    api group: 'org.jetbrains', name: 'annotations', version: annotations_version
	api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: coroutines_version
	api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-jvm', version: coroutines_version
	api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: coroutines_version
    api group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-json', version: serialization_version
}

minecraft {
    mappings channel: 'official', version: '1.19.2'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.console.level', 'debug'
        }
    }
}

shadowJar {
    archiveClassifier.set('obf')

    dependencies {
        include dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}")
        include dependency("org.jetbrains:annotations:${annotations_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:${serialization_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:${serialization_version}")
    }
}

jar {
    manifest {
        attributes(['FMLModType': 'LANGPROVIDER'])
        attributes([
                'Specification-Title': 'Mod Language Provider',
                'Specification-Vendor': 'Forge',
                'Specification-Version': '1',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor' :'thedarkcolour',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ], 'thedarkcolour/kotlinforforge/')
    }
}

static def options(kotlinOptions)  {
    kotlinOptions.freeCompilerArgs = ['-Xexplicit-api=warning', '-Xjvm-default=all']
}

compileKotlin {
    options(kotlinOptions)
}

compileTestKotlin {
    options(kotlinOptions)
}

kotlinSourcesJar {
    from(sourceSets.main.kotlin.srcDirs)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)